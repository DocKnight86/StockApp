@rendermode InteractiveServer
@page "/TrainModel"
@using Microsoft.ML
@using Microsoft.ML.Data
@using System.IO
@using System.Linq
@using System.Globalization
@inject IJSRuntime JS
@implements IDisposable

<h3>Stock Data Analysis and Prediction (Trend-Based Predictions)</h3>

<!-- Training Section -->
<div class="mb-3">
    <label for="csvPath">CSV Path:</label>
    <input id="csvPath" class="form-control" @bind="CsvFilePath" placeholder="Enter CSV file path" />
    <label for="forecastHorizon">Forecast Horizon (Days):</label>
    <input id="forecastHorizon" class="form-control" type="number" @bind="forecastHorizon" min="1" max="5" />
</div>

<button class="btn btn-primary" @onclick="TrainModelAsync" disabled="@isTraining">Train Model</button>

@if (!string.IsNullOrWhiteSpace(TrainStatus))
{
    <div class="alert alert-info mt-3 white-space-pre-wrap">@TrainStatus</div>
}

@if (ModelTrained)
{
    <h4>Data Analysis</h4>
    <p><strong>Total Positive Days:</strong> @PositiveCount</p>
    <p><strong>Total Negative Days:</strong> @NegativeCount</p>
    <p><strong>Longest Positive Streak:</strong> @LongestGainStreak days</p>
    <p><strong>Longest Negative Streak:</strong> @LongestLossStreak days</p>

    <h5>Pattern Analysis (After Streaks)</h5>
    @if (PatternCounts.Any())
    {
        <table class="table table-bordered mt-3">
            <thead>
                <tr>
                    <th>Pattern</th>
                    <th>Gain Count</th>
                    <th>Gain Percentage</th>
                    <th>Loss Count</th>
                    <th>Loss Percentage</th>
                </tr>
            </thead>
            <tbody>
                @foreach (var pattern in PatternCounts)
                {
                    <tr>
                        <td>@pattern.Key</td>
                        <td>@pattern.Value.GainCount</td>
                        <td>@($"{pattern.Value.GainPercentage:F2}%")</td>
                        <td>@pattern.Value.LossCount</td>
                        <td>@($"{pattern.Value.LossPercentage:F2}%")</td>
                    </tr>
                }
            </tbody>
        </table>
    }
    else
    {
        <p>No significant patterns found.</p>
    }

    <h4>Classification Results (Models per Forecast Horizon)</h4>
    @if (ModelResults.Any())
    {
        <table class="table table-bordered mt-3">
            <thead>
                <tr>
                    <th>Forecast Horizon (Days)</th>
                    <th>Model</th>
                    <th>Accuracy</th>
                    <th>F1 Score</th>
                    <th>Last Prediction</th>
                </tr>
            </thead>
            <tbody>
                @foreach (var result in ModelResults.OrderBy(r => r.ForecastHorizon).ThenBy(r => r.ModelName))
                {
                    <tr>
                        <td>@result.ForecastHorizon</td>
                        <td>@result.ModelName</td>
                        <td>@($"{result.Accuracy * 100:F2}%")</td>
                        <td>@($"{result.F1Score * 100:F2}%")</td>
                        <td>@result.Prediction</td>
                    </tr>
                }
            </tbody>
        </table>
    }
    else
    {
        <p>No classification results available.</p>
    }

    <h4>Projection Results (1 to 5 Days Out)</h4>
    @if (ProjectionResults.Any())
    {
        <table class="table table-bordered mt-3">
            <thead>
                <tr>
                    <th>Forecast Horizon (Days)</th>
                    <th>Model</th>
                    <th>Prediction</th>
                    <th>Probability of Gain</th>
                    <th>Probability of Loss</th>
                </tr>
            </thead>
            <tbody>
                @foreach (var projection in ProjectionResults.OrderBy(p => p.ForecastDays).ThenBy(p => p.ModelName))
                {
                    <tr>
                        <td>@projection.ForecastDays</td>
                        <td>@projection.ModelName</td>
                        <td>@projection.Prediction</td>
                        <td>@($"{projection.ProbabilityGain:F2}%")</td>
                        <td>@($"{projection.ProbabilityLoss:F2}%")</td>
                    </tr>
                }
            </tbody>
        </table>
    }
    else
    {
        <p>No projection results available.</p>
    }

    @if (!string.IsNullOrWhiteSpace(DebugStatus))
    {
        <div class="alert alert-warning mt-3 white-space-pre-wrap">@DebugStatus</div>
    }

    @if (isPredicting)
    {
        <div class="spinner-border text-success mt-3" role="status">
            <span class="visually-hidden">Predicting...</span>
        </div>
    }

    <!-- Scatter Chart Section (Accuracy Chart) -->
    <h4 class="mt-4">Model Accuracy Chart</h4>
    <canvas id="myScatterChart" width="400" height="400"></canvas>

    <!-- Trend Chart Section (Overlay Actual Close, 5-Day MA, and ML Trend Signals) -->
    <h4 class="mt-4">Trend Chart: Actual Close vs 5-Day MA with ML Trend Signals</h4>
    <canvas id="trendChart" width="600" height="400"></canvas>
}

@code {
    // 1) UI / State
    private string CsvFilePath { get; set; } = @"C:\Users\knigh\OneDrive\Documents\INTC_DailyData.csv";
    private int forecastHorizon { get; set; } = 5;
    private string TrainStatus { get; set; } = "";
    private string DebugStatus { get; set; } = "";
    private bool ModelTrained { get; set; } = false;
    private List<ModelResult> ModelResults { get; set; } = new List<ModelResult>();

    // Data Analysis
    private int PositiveCount { get; set; } = 0;
    private int NegativeCount { get; set; } = 0;
    private int LongestGainStreak { get; set; } = 0;
    private int LongestLossStreak { get; set; } = 0;
    private Dictionary<string, PatternCount> PatternCounts { get; set; } = new Dictionary<string, PatternCount>();

    // Projection Results
    private List<ProjectionResult> ProjectionResults { get; set; } = new List<ProjectionResult>();

    // For trend visualization
    private List<MovingAverageData> MovingAverages { get; set; } = new List<MovingAverageData>();
    // Store ML data (with trend features and Date) for charting trend signals.
    private List<StockMLData> TrendMLDataList { get; set; } = new List<StockMLData>();

    // 2) ML.NET and Model Storage
    private MLContext mlContext = new MLContext(seed: 0);
    private bool isTraining = false;
    private bool isPredicting = false;
    private Dictionary<int, List<(ITransformer Model, string ModelName)>> trainedModelsPerHorizon = new Dictionary<int, List<(ITransformer, string)>>();
    private bool scatterChartRendered = false;
    private bool trendChartRendered = false;

    // 3) Main Training Loop
    private async Task TrainModelAsync()
    {
        try
        {
            if (string.IsNullOrWhiteSpace(CsvFilePath) || !File.Exists(CsvFilePath))
            {
                TrainStatus = "Invalid or missing CSV file path.";
                return;
            }
            if (forecastHorizon < 1 || forecastHorizon > 5)
            {
                TrainStatus = "Forecast must be between 1 and 5 days.";
                return;
            }
            isTraining = true;
            TrainStatus = "Training in progress...";
            DebugStatus = "";
            ModelResults.Clear();
            PatternCounts.Clear();
            ProjectionResults.Clear();
            trainedModelsPerHorizon.Clear();
            scatterChartRendered = false;
            trendChartRendered = false;
            StateHasChanged();

            // (A) Load CSV
            var dataView = mlContext.Data.LoadFromTextFile<RawStockData>(
                path: CsvFilePath,
                hasHeader: true,
                separatorChar: ',',
                allowQuoting: true,
                allowSparse: false);
            var allRows = mlContext.Data.CreateEnumerable<RawStockData>(dataView, reuseRowObject: false).ToList();
            DebugStatus = $"Loaded {allRows.Count} lines from CSV.";

            // (B) Process Data
            int posCount, negCount, longestGain, longestLoss;
            var processedData = ProcessData(allRows, out posCount, out negCount, out longestGain, out longestLoss);
            PositiveCount = posCount;
            NegativeCount = negCount;
            LongestGainStreak = longestGain;
            LongestLossStreak = longestLoss;
            DebugStatus += $"\nTotal Gains: {PositiveCount}, Total Losses: {NegativeCount}.";
            DebugStatus += $"\nLongest Gain Streak: {LongestGainStreak}, Longest Loss Streak: {LongestLossStreak}.";

            // (C) Analyze Patterns
            PatternCounts = AnalyzePatterns(processedData, 3);
            if (PatternCounts.Any())
            {
                DebugStatus += $"\nFound {PatternCounts.Count} patterns.";
            }

            // Compute 5-day moving averages for visualization.
            MovingAverages = ComputeMovingAverages(processedData, 5);

            // (D) Prepare ML Data based solely on trend features.
            TrendMLDataList = PrepareMLDataWithTrend(processedData, 5);
            DebugStatus += $"\nPrepared {TrendMLDataList.Count} ML data rows with trend features.";
            if (TrendMLDataList.Count == 0)
            {
                TrainStatus = "No ML data rows created. Check your data and forecast horizon.";
                return;
            }

            // Define ML.NET pipeline using only trend features.
            var transformPipeline = mlContext.Transforms.Concatenate("Features",
                    nameof(StockMLData.Close),
                    nameof(StockMLData.Volume),
                    nameof(StockMLData.Price_MA5),
                    nameof(StockMLData.Volume_MA5),
                    nameof(StockMLData.PriceDelta),
                    nameof(StockMLData.VolumeDelta))
                .Append(mlContext.Transforms.NormalizeMinMax("Features"));

            // Model configurations.
            var modelConfigs = new List<ModelConfig>
            {
                new ModelConfig
                {
                    ModelName = "FastTree",
                    Trainer = mlContext.BinaryClassification.Trainers.FastTree(
                        labelColumnName: "Label",
                        featureColumnName: "Features")
                },
                new ModelConfig
                {
                    ModelName = "LightGbm",
                    Trainer = mlContext.BinaryClassification.Trainers.LightGbm(
                        labelColumnName: "Label",
                        featureColumnName: "Features")
                },
                new ModelConfig
                {
                    ModelName = "SdcaLogisticRegression",
                    Trainer = mlContext.BinaryClassification.Trainers.SdcaLogisticRegression(
                        labelColumnName: "Label",
                        featureColumnName: "Features")
                }
            };

            // Train models for each forecast horizon (1 to 5 days)
            for (int horizon = 1; horizon <= 5; horizon++)
            {
                forecastHorizon = horizon;
                var currentMlDataList = PrepareMLDataWithTrend(processedData, 5);
                if (currentMlDataList.Count == 0)
                {
                    DebugStatus += $"\nNo ML data rows for horizon {horizon} days.";
                    continue;
                }
                int trainCount = (int)(currentMlDataList.Count * 0.7);
                var trainRows = currentMlDataList.Take(trainCount).ToList();
                var testRows = currentMlDataList.Skip(trainCount).ToList();
                var trainData = mlContext.Data.LoadFromEnumerable(trainRows);
                var testData = mlContext.Data.LoadFromEnumerable(testRows);

                trainedModelsPerHorizon[horizon] = new List<(ITransformer, string)>();
                foreach (var config in modelConfigs)
                {
                    var pipeline = transformPipeline.Append(config.Trainer);
                    var model = pipeline.Fit(trainData);
                    trainedModelsPerHorizon[horizon].Add((model, config.ModelName));
                    var predictions = model.Transform(testData);
                    var metrics = mlContext.BinaryClassification.Evaluate(predictions, labelColumnName: "Label");
                    var lastMLData = currentMlDataList.Last();
                    var lastPred = await MakePredictionAsync(model, lastMLData, config.ModelName);
                    ModelResults.Add(new ModelResult
                        {
                            ModelName = config.ModelName,
                            ForecastHorizon = horizon,
                            Accuracy = metrics.Accuracy,
                            F1Score = metrics.F1Score,
                            Prediction = lastPred
                        });
                }
            }

            DebugStatus += $"\nTraining complete. Models evaluated.";
            // (E) Projection for 1 to 5 Days Out
            await ProjectForecastsAsync(processedData, TrendMLDataList);
            ModelTrained = true;
            TrainStatus = "Training complete. Models evaluated with test data.";
        }
        catch (Exception ex)
        {
            TrainStatus = $"An error occurred during training: {ex.Message}";
            DebugStatus += $"\nError: {ex.Message}";
        }
        finally
        {
            isTraining = false;
            StateHasChanged();
        }
    }

    // 4A) New Data Preparation Method: Use Trend Features Only (includes Date)
    private List<StockMLData> PrepareMLDataWithTrend(List<StockDataProcessed> data, int windowSize)
    {
        var mlDataList = new List<StockMLData>();
        for (int i = windowSize - 1; i < data.Count; i++)
        {
            if (i + forecastHorizon >= data.Count)
                continue;
            var currentDay = data[i];
            var futureDay = data[i + forecastHorizon];
            float priceMA = (float)data.Skip(i - windowSize + 1).Take(windowSize).Average(d => d.Close);
            float volumeMA = (float)data.Skip(i - windowSize + 1).Take(windowSize).Average(d => d.VolumeNumeric);
            float priceDelta = currentDay.Close - priceMA;
            float volumeDelta = currentDay.VolumeNumeric - volumeMA;
            mlDataList.Add(new StockMLData
                {
                    Date = currentDay.Date,
                    Close = currentDay.Close,
                    Volume = currentDay.VolumeNumeric,
                    Price_MA5 = priceMA,
                    Volume_MA5 = volumeMA,
                    PriceDelta = priceDelta,
                    VolumeDelta = volumeDelta,
                    Label = futureDay.IsGain
                });
        }
        return mlDataList;
    }

    // 5) Data Analysis Methods
    private List<StockDataProcessed> ProcessData(List<RawStockData> rawData, out int positiveCount, out int negativeCount, out int longestGainStreak, out int longestLossStreak)
    {
        var processedData = new List<StockDataProcessed>();
        positiveCount = 0;
        negativeCount = 0;
        longestGainStreak = 0;
        longestLossStreak = 0;
        int currentGainStreak = 0;
        int currentLossStreak = 0;
        foreach (var row in rawData)
        {
            if (!DateTime.TryParseExact(row.Date, "yyyy-MM-dd", CultureInfo.InvariantCulture, DateTimeStyles.None, out DateTime parsedDate))
            {
                DebugStatus += $"\nSkipping row due to invalid date format: {row.Date}";
                continue;
            }
            if (!float.TryParse(row.Volume, out float volumeNumeric))
            {
                DebugStatus += $"\nSkipping row due to invalid volume format: {row.Volume}";
                continue;
            }
            float ocPctChange = (row.Open != 0f) ? ((row.Close - row.Open) / row.Open) * 100f : 0f;
            bool isGain = ocPctChange > 0;
            if (isGain)
            {
                positiveCount++;
                currentGainStreak++;
                currentLossStreak = 0;
                if (currentGainStreak > longestGainStreak)
                    longestGainStreak = currentGainStreak;
            }
            else
            {
                negativeCount++;
                currentLossStreak++;
                currentGainStreak = 0;
                if (currentLossStreak > longestLossStreak)
                    longestLossStreak = currentLossStreak;
            }
            processedData.Add(new StockDataProcessed
                {
                    Date = parsedDate,
                    Open = row.Open,
                    High = row.High,
                    Low = row.Low,
                    Close = row.Close,
                    VolumeNumeric = volumeNumeric,
                    OcPctChange = ocPctChange,
                    IsGain = isGain
                });
        }
        DebugStatus += $"\nSuccessfully processed {processedData.Count} out of {rawData.Count} rows.";
        return processedData;
    }

    private List<MovingAverageData> ComputeMovingAverages(List<StockDataProcessed> data, int windowSize)
    {
        var maData = new List<MovingAverageData>();
        if (data.Count < windowSize)
            return maData;
        for (int i = windowSize - 1; i < data.Count; i++)
        {
            double priceAvg = data.Skip(i - windowSize + 1).Take(windowSize).Average(d => d.Close);
            double volumeAvg = data.Skip(i - windowSize + 1).Take(windowSize).Average(d => d.VolumeNumeric);
            maData.Add(new MovingAverageData
                {
                    Date = data[i].Date,
                    PriceMovingAverage = priceAvg,
                    VolumeMovingAverage = volumeAvg
                });
        }
        return maData;
    }

    // 6) Projection Methods
    private async Task ProjectForecastsAsync(List<StockDataProcessed> data, List<StockMLData> mlDataList)
    {
        ProjectionResults.Clear();
        for (int daysOut = 1; daysOut <= 5; daysOut++)
        {
            if (!trainedModelsPerHorizon.ContainsKey(daysOut))
            {
                DebugStatus += $"\nNo trained models found for {daysOut} days out.";
                continue;
            }
            foreach (var (model, modelName) in trainedModelsPerHorizon[daysOut])
            {
                var lastMLData = mlDataList.Last();
                var predEngine = mlContext.Model.CreatePredictionEngine<StockMLData, ChunkPrediction>(model);
                var prediction = await Task.Run(() => predEngine.Predict(lastMLData));
                bool isGain = prediction.PredictedLabel;
                double probabilityGain = modelName.Equals("SdcaLogisticRegression", StringComparison.OrdinalIgnoreCase)
                    ? Sigmoid(prediction.Score)
                    : Math.Clamp(prediction.Probability, 0.0f, 1.0f);
                double probabilityLoss = 1.0 - probabilityGain;
                probabilityGain *= 100.0;
                probabilityLoss *= 100.0;
                ProjectionResults.Add(new ProjectionResult
                    {
                        ForecastDays = daysOut,
                        ModelName = modelName,
                        Prediction = isGain ? "UP" : "DOWN",
                        ProbabilityGain = probabilityGain,
                        ProbabilityLoss = probabilityLoss
                    });
            }
        }
    }

    // 7) MakePredictionAsync Method
    private async Task<string> MakePredictionAsync(ITransformer model, StockMLData input, string modelName)
    {
        try
        {
            isPredicting = true;
            StateHasChanged();
            var predEngine = mlContext.Model.CreatePredictionEngine<StockMLData, ChunkPrediction>(model);
            var prediction = await Task.Run(() => predEngine.Predict(input));
            bool isGain = prediction.PredictedLabel;
            double probabilityGain = modelName.Equals("SdcaLogisticRegression", StringComparison.OrdinalIgnoreCase)
                ? Sigmoid(prediction.Score)
                : Math.Clamp(prediction.Probability, 0.0f, 1.0f);
            double probabilityLoss = 1.0 - probabilityGain;
            probabilityGain *= 100.0;
            probabilityLoss *= 100.0;
            return isGain ? "UP" : "DOWN";
        }
        catch (Exception ex)
        {
            return $"Prediction failed ({modelName}): {ex.Message}";
        }
        finally
        {
            isPredicting = false;
            StateHasChanged();
        }
    }

    // 8) Sigmoid Function
    private double Sigmoid(float score)
    {
        return 1.0 / (1.0 + Math.Exp(-score));
    }

    // 9) Chart Rendering Methods
    private async Task RenderChartAsync()
    {
        if (ModelResults == null || !ModelResults.Any())
            return;
        var grouped = ModelResults.GroupBy(r => r.ModelName)
                                  .Select(g => new
                                  {
                                      label = g.Key,
                                      data = g.Select(r => new { x = r.ForecastHorizon, y = r.Accuracy * 100.0 }).ToList(),
                                      backgroundColor = "rgba(75, 192, 192, 1)"
                                  })
                                  .ToList();
        await JS.InvokeVoidAsync("drawScatterChart", grouped);
    }

    // New method: GetTrendSignals computes predictions for each ML data point using the horizon=1 model.
    private List<TrendSignal> GetTrendSignals(List<StockMLData> mlData)
    {
        var signals = new List<TrendSignal>();
        if (!trainedModelsPerHorizon.ContainsKey(1) || !mlData.Any())
            return signals;
        var (model, modelName) = trainedModelsPerHorizon[1].First();
        var predEngine = mlContext.Model.CreatePredictionEngine<StockMLData, ChunkPrediction>(model);
        foreach (var item in mlData)
        {
            var prediction = predEngine.Predict(item);
            signals.Add(new TrendSignal
                {
                    Date = item.Date,
                    Close = item.Close,
                    Prediction = prediction.PredictedLabel ? "UP" : "DOWN",
                    Probability = prediction.PredictedLabel ? prediction.Probability * 100.0 : (1 - prediction.Probability) * 100.0
                });
        }
        return signals;
    }

    private async Task RenderTrendChartAsync()
    {
        // If there's no data, exit
        if (TrendMLDataList == null || !TrendMLDataList.Any() || MovingAverages == null || !MovingAverages.Any())
            return;

        // 1) Determine the cutoff date: last 365 days from the maximum date in TrendMLDataList
        var maxDate = TrendMLDataList.Max(x => x.Date);
        var cutoffDate = maxDate.AddDays(-365);

        // 2) Filter ML data and moving average data to last 365 days
        var filteredMLData = TrendMLDataList
            .Where(x => x.Date >= cutoffDate)
            .OrderBy(x => x.Date)
            .ToList();

        var filteredMA = MovingAverages
            .Where(ma => ma.Date >= cutoffDate)
            .OrderBy(ma => ma.Date)
            .ToList();

        // If there's nothing left after filtering, exit
        if (!filteredMLData.Any() || !filteredMA.Any())
            return;

        // 3) Create date labels from the filtered moving average list
        var labels = filteredMA.Select(ma => ma.Date.ToString("yyyy-MM-dd")).ToList();

        // 4) Create dataset for 5-Day MA
        var priceMADataset = new
        {
            label = "Price 5-Day MA",
            data = filteredMA.Select(ma => ma.PriceMovingAverage).ToList(),
            fill = false,
            borderColor = "blue",
            tension = 0.1
        };

        // 5) Create dataset for actual closing prices from the filtered ML data
        var actualCloseDataset = new
        {
            label = "Actual Close",
            data = filteredMLData.Select(x => x.Close).ToList(),
            fill = false,
            borderColor = "red",
            tension = 0.1
        };

        // 6) Generate trend signals using horizon=1 model, then filter them to last 365 days
        var signals = GetTrendSignals(filteredMLData);

        // Split signals into UP and DOWN for separate markers
        var upSignals = signals.Where(s => s.Prediction == "UP")
                               .Select(s => new { x = s.Date.ToString("yyyy-MM-dd"), y = s.Close })
                               .ToList();

        var downSignals = signals.Where(s => s.Prediction == "DOWN")
                                 .Select(s => new { x = s.Date.ToString("yyyy-MM-dd"), y = s.Close })
                                 .ToList();

        // 7) Build marker datasets for UP and DOWN signals
        var upDataset = new
        {
            label = "ML Trend UP",
            data = upSignals,
            pointStyle = "triangle",
            backgroundColor = "green",
            showLine = false,
            radius = 8
        };

        var downDataset = new
        {
            label = "ML Trend DOWN",
            data = downSignals,
            pointStyle = "rect",
            backgroundColor = "orange",
            showLine = false,
            radius = 8
        };

        // 8) Invoke the JavaScript function to draw the line chart
        await JS.InvokeVoidAsync("drawLineChart",
            new object[]
            {
            new object[]
            {
                priceMADataset,
                actualCloseDataset,
                upDataset,
                downDataset
            },
            labels
            }
        );
    }


    // 10) Lifecycle: Render Charts After DOM Update
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (ModelTrained)
        {
            if (!scatterChartRendered)
            {
                await RenderChartAsync();
                scatterChartRendered = true;
            }
            if (!trendChartRendered)
            {
                await RenderTrendChartAsync();
                trendChartRendered = true;
            }
        }
    }

    // 11) Dispose Method
    public void Dispose()
    {
        // Cleanup if necessary.
    }

    // 12) Data Models
    class RawStockData
    {
        [LoadColumn(0)] public string Date { get; set; } = "";
        [LoadColumn(1)] public float Open { get; set; }
        [LoadColumn(2)] public float High { get; set; }
        [LoadColumn(3)] public float Low { get; set; }
        [LoadColumn(4)] public float Close { get; set; }
        [LoadColumn(5)] public string Volume { get; set; } = "";
    }

    class StockDataProcessed
    {
        public DateTime Date { get; set; }
        public float Open { get; set; }
        public float High { get; set; }
        public float Low { get; set; }
        public float Close { get; set; }
        public float VolumeNumeric { get; set; }
        public float OcPctChange { get; set; }
        public bool IsGain { get; set; }
    }

    // Updated ML data model using trend features; now includes Date for tracking.
    class StockMLData
    {
        public DateTime Date { get; set; }
        public float Close { get; set; }
        public float Volume { get; set; }
        public float Price_MA5 { get; set; }
        public float Volume_MA5 { get; set; }
        public float PriceDelta { get; set; }
        public float VolumeDelta { get; set; }
        public bool Label { get; set; }
    }

    class ChunkPrediction
    {
        [ColumnName("PredictedLabel")]
        public bool PredictedLabel { get; set; }
        [ColumnName("Probability")]
        public float Probability { get; set; }
        [ColumnName("Score")]
        public float Score { get; set; }
    }

    class ModelResult
    {
        public string ModelName { get; set; } = "";
        public int ForecastHorizon { get; set; } = 0;
        public double Accuracy { get; set; }
        public double F1Score { get; set; }
        public string Prediction { get; set; } = "";
    }

    class PatternCount
    {
        public int GainCount { get; set; } = 0;
        public int LossCount { get; set; } = 0;
        public double GainPercentage { get; set; } = 0.0;
        public double LossPercentage { get; set; } = 0.0;
    }

    class ProjectionResult
    {
        public int ForecastDays { get; set; }
        public string ModelName { get; set; } = "";
        public string Prediction { get; set; } = "";
        public double ProbabilityGain { get; set; }
        public double ProbabilityLoss { get; set; }
    }

    class ModelConfig
    {
        public string ModelName { get; set; } = "";
        public IEstimator<ITransformer> Trainer { get; set; } = null!;
    }

    class MovingAverageData
    {
        public DateTime Date { get; set; }
        public double PriceMovingAverage { get; set; }
        public double VolumeMovingAverage { get; set; }
    }

    // New class for trend signals
    class TrendSignal
    {
        public DateTime Date { get; set; }
        public string Prediction { get; set; } = "";
        public double Probability { get; set; }
        public float Close { get; set; }
    }

    // 13) AnalyzePatterns Method
    private Dictionary<string, PatternCount> AnalyzePatterns(List<StockDataProcessed> data, int maxStreak)
    {
        var patternCounts = new Dictionary<string, PatternCount>();
        for (int i = 0; i < data.Count; i++)
        {
            for (int streak = 1; streak <= maxStreak; streak++)
            {
                if (i - streak < 0)
                    continue;
                bool allGains = true;
                bool allLosses = true;
                for (int j = 0; j < streak; j++)
                {
                    if (!data[i - j - 1].IsGain)
                        allGains = false;
                    if (data[i - j - 1].IsGain)
                        allLosses = false;
                }
                string patternKey = "";
                if (allGains)
                    patternKey = $"After {streak} Gains";
                else if (allLosses)
                    patternKey = $"After {streak} Losses";
                else
                    continue;
                if (!patternCounts.ContainsKey(patternKey))
                    patternCounts[patternKey] = new PatternCount();
                if (data[i].IsGain)
                    patternCounts[patternKey].GainCount++;
                else
                    patternCounts[patternKey].LossCount++;
            }
        }
        foreach (var key in patternCounts.Keys.ToList())
        {
            var count = patternCounts[key];
            int total = count.GainCount + count.LossCount;
            if (total > 0)
            {
                count.GainPercentage = (double)count.GainCount / total * 100.0;
                count.LossPercentage = (double)count.LossCount / total * 100.0;
            }
            else
            {
                count.GainPercentage = 0;
                count.LossPercentage = 0;
            }
        }
        return patternCounts;
    }
}
